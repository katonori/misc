set wildmode=list:longest
set smartindent
set expandtab
set incsearch
set sw=4
set bs=2
set laststatus=2
set hlsearch
set encoding=utf-8
set ruler
set number
set statusline=%f%m%r%h%w\ [%{&fenc}][%{&ff}]%y%6l,%-6c[%p%%(%l)]
set cursorline
set cursorcolumn
set fileformats=unix,dos,mac
set grepprg=mgrep
set nf="hex"
set ignorecase
set smartcase
set smarttab
set timeoutlen=1000

if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile
endif

" 文字コードの自動認識
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

"autocmd BufReadPost * normal g;|zz
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | exe "normal zz"

au! QuickfixCmdPost vimgrep,grep,make if len(getqflist()) != 0 | bo copen | wincmd p | endif

" python mode
let g:pymode_folding = 0
let g:pymode_lint_ignore = "E501,E226,E225,E228"
let g:pymode_lint_write = 0

" hier
execute "highlight ucurl_my None"
let g:hier_highlight_group_qf = "ucurl_my"

" ps mode
if stridx(system("uname -a "), "Linux") != -1
    let g:PS_PsCmd = "ps axuf"
else
    let g:PS_PsCmd = "ps aux"
endif
let g:PS_KillCmd = "kill -9"
let g:PS_RegExRule = '\w\+\s\+\zs\d\+\ze'

" md preview
autocmd FileType markdown set makeprg=pandoc\ -r\ markdown\ -t\ html\ -c\ ~/devel/css/markdown.css\ %\ -o\ /tmp/md.html\ &&\ open\ /tmp/md.html

" manageg path list
function! s:UpdatePathList()
python << EOF
import vim
oldList = vim.eval('&path').split(",")
newList = vim.eval('system("cpath_mgr " . expand("%:p"))').split(",")
for i in newList:
    if not (i in oldList):
        oldList.append(i)
vim.command('let &path="' + ",".join(oldList) + '"')
EOF
endfunction

autocmd FileType c call s:UpdatePathList()
autocmd FileType cpp call s:UpdatePathList()

command! -nargs=0 CxxtagsInit :let g:CXXTAGS_DatabaseDir=fnamemodify(b:git_dir, ":h") . "/_db"
autocmd FileType * setlocal formatoptions-=ro

" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 5
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

 " Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Select with <TAB>
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

let g:neocomplcache_ctags_arguments_list = {
  \ 'perl' : '-R -h ".pm"'
  \ }

"et g:neocomplcache_snippets_dir = "~/.vim/snippets"
" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default'    : '',
    \ 'perl'       : $HOME . '/.vim/dict/perl.dict',
    \ 'c'          : $HOME . '/.vim/dict/c.dict',
    \ 'cpp'        : $HOME . '/.vim/dict/c.dict'
    \ }

" Define keyword.
if !exists('g:neocomplcache_keyword_patterns')
  let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

" for snippets
imap <expr><C-k> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : "\<C-n>"
set completeopt=longest,menuone

"==========================================
"neocomplete.vim
"==========================================
"use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '¥*ku¥*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '¥h¥w*'
" Plugin key-mappings.
inoremap <expr><C-g>  neocomplete#undo_completion()
inoremap <expr><C-l>  neocomplete#complete_common_string()

"
" neosnippets
"
" Plugin key-mappings.
imap <c-k> <Plug>(neosnippet_expand_or_jump)
smap <c-k> <Plug>(neosnippet_expand_or_jump)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
           \ "\<Plug>(neosnippet_expand_or_jump)"
           \ : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
           \ "\<Plug>(neosnippet_expand_or_jump)"
           \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets, ~/.vim/snippets'
let g:neosnippet#disable_runtime_snippets = { "_": 1, }

let g:Gtags_No_Auto_Jump=1

"
" easymotion
"
let g:EasyMotion_keys = 'ASDFJKLWERIOPGHZXCVNM;'
" Show target key with upper case to improve readability
let g:EasyMotion_use_upper = 1
" Jump to first match with enter & space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

let g:textobj_multiblock_blocks = [
    \ [ ",", ","],
    \ [ ",", ")"],
    \ [ "(", ")" ],
    \ [ "[", "]" ],
    \ [ "{", "}" ],
    \ [ '<', '>' ],
    \ [ '"', '"', 1 ],
    \ [ "'", "'", 1 ],
\ ]
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)

"
" Switch.vim
"
let g:switch_custom_definitions =
    \ [
    \   {
    \     'True':       'False',
    \     'False':      'True',
    \   },
    \ ]
nnoremap + :Switch<cr>

"
" Vundle
"
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()
Bundle 'gmarik/Vundle.vim'
Bundle 'katonori/BinEdit.vim'
Bundle 'katonori/cxxtags-vim'
Bundle 'katonori/ps.vim'
Bundle 'katonori/poslist.vim'
Bundle 'katonori/regex_efm.vim'
Bundle 'katonori/vicmake.vim'
Bundle 'katonori/vimsvn.vim'
Bundle 'osyo-manga/vim-textobj-multiblock'
Bundle 'tpope/vim-fugitive'
Bundle 'kana/vim-textobj-user'
Bundle 'Lokaltog/vim-easymotion'
Bundle "honza/vim-snippets"
"Bundle 'Shougo/neocomplete'
"Bundle 'Shougo/neocomplcache'
Bundle 'Shougo/neosnippet.vim'
Bundle 'Shougo/neosnippet-snippets'
Bundle 'Shougo/unite.vim'
Bundle 'tomtom/quickfixsigns_vim'
Bundle 'Shougo/neomru.vim'
Bundle 'MultipleSearch'
Bundle 'mhinz/vim-startify'
Bundle 'AndrewRadev/switch.vim'
Bundle 'davidhalter/jedi-vim'
Bundle 'vim-scripts/mru.vim'
let MRU_Add_Menu = 0
Bundle 'osyo-manga/vim-over'
