cnoremap <C-D> <Del>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>
cnoremap <C-A> <Home>
cnoremap <c-n> <down>
cnoremap <c-p> <up>

nnoremap (U :call <SID>GoOuterBack()<cr>
nnoremap (D :call <SID>GoInnerBack()<cr>
nnoremap )U :call <SID>GoOuterForward()<cr>
nnoremap )D :call <SID>GoInnerForward()<cr>
nnoremap <C-N> :next<CR>
nnoremap <C-P> :prev<CR>
nnoremap <space> $
nnoremap * :let @/="\\<<C-R><C-W>\\>"<CR>:set hlsearch<CR>
nnoremap gn :cnext<CR>
nnoremap gp :cprev<CR>
nnoremap <Leader><C-M> :make<CR>
nnoremap <C-W>C :cclose<CR>
nnoremap <Leader>c :set cursorcolumn!<CR>
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
nnoremap <C-J> 4j
nnoremap <C-K> 4k
nnoremap <c-_>r :reg<cr>
nnoremap <leader>C : <c-r><c-w><Home>
nnoremap + :let @t=@/<cr>:let @/='[A-Z]'<cr>n:let @/=@t<cr>
nnoremap - :let @t=@/<cr>:let @/='[A-Z]'<cr>N:let @/=@t<cr>
nnoremap <leader>y :call writefile(split(@@, '\n'), $HOME . "/yank.txt")<cr>
nnoremap <leader>p :read $HOME/yank.txt<cr>

function! s:GoOuterBack()
    let l:lines = getline(0, ".")
    let l:i = line(".")
    let l:indentLv = len(matchstr(getline("."), '^ \+'))
    let l:i -= 1
    while l:i >= 1
        let l:indent = matchstr(l:lines[l:i], '^ \+')
        let l:col = len(l:indent)
        if l:col < l:indentLv
            call cursor(l:i+1, l:col+1)
            break
        endif
        let l:i -= 1
    endwhile
endfunction

function! s:GoInnerBack()
    let l:lines = getline(0, ".")
    let l:i = line(".")
    let l:indentLv = len(matchstr(getline("."), '^ \+'))
    let l:i -= 1
    while l:i >= 1
        let l:indent = matchstr(l:lines[l:i], '^ \+')
        let l:col = len(l:indent)
        if l:col > l:indentLv
            call cursor(l:i+1, l:col+1)
            break
        endif
        let l:i -= 1
    endwhile
endfunction

function! s:GoOuterForward()
    let l:lines = getline(".", "$")
    let l:last = line("$") - line(".")
    let l:indentLv = len(matchstr(getline("."), '^ \+'))
    let l:i = 1
    while l:i <= l:last
        let l:indent = matchstr(l:lines[l:i], '^ \+')
        let l:col = len(l:indent)
        if l:col < l:indentLv
            call cursor(l:i+line("."), l:col+1)
            break
        endif
        let l:i += 1
    endwhile
endfunction

function! s:GoInnerForward()
    let l:lines = getline(".", "$")
    let l:last = line("$") - line(".")
    let l:indentLv = len(matchstr(getline("."), '^ \+'))
    let l:i = 1
    while l:i <= l:last
        let l:indent = matchstr(l:lines[l:i], '^ \+')
        let l:col = len(l:indent)
        if l:col > l:indentLv
            call cursor(l:i+line("."), l:col+1)
            break
        endif
        let l:i += 1
    endwhile
endfunction

noremap <leader>r :%s/<c-r><c-w>/

vnoremap <C-J> 4j
vnoremap <C-K> 4k
vnoremap [[ :<c-u>let @t=@/<cr>:let @/='{'<cr>N:let @/=@t<cr>mv`>V`v
vnoremap ]] :<c-u>let @t=@/<cr>:let @/='}'<cr>`>n:let @/=@t<cr>mv`<V`v
vnoremap <leader>C y: <c-r>"<Home>
vnoremap <leader>r y:%s/<c-r>=escape(@",'\/')<cr>/
vnoremap <silent> * "vy/\V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>
vnoremap <silent> <leader>g "vy:exec ":vimgrep /" . escape(getreg('v'), '\/') . "/j %"<CR>
"vnoremap <C-R> y:<C-R>=substitute(@", "\n", "", "g")<CR><CR>
vnoremap <C-R> y:call <SID>ExecLines(@")<cr>
function! s:ExecLines(lines) range
    for i in split(a:lines, "\n")
        exec i
    endfor
endfunction

" grep
nnoremap <leader>g :vimgrep /<C-R><C-W>/j %<CR>:let @/="<C-R><C-W>"<CR>:set hlsearch<CR>
nnoremap gG :vimgrep /<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')/j %<CR>

"
" key maps for quickfix
"
autocmd! FileType qf
autocmd  FileType qf nnoremap <buffer> <CR> <CR>zz:wincmd p<CR>
autocmd  FileType qf nnoremap <buffer> q :wincmd p<CR>:cclose<CR>

"
" key maps for python mode
"
autocmd! FileType python
autocmd  FileType python nnoremap <leader>l :PyLint<CR>

"
" gtags
"
nnoremap <C-G>r :Gtags -r <C-R><C-W><CR>
nnoremap <C-G>d :Gtags <C-R><C-W><CR>
nnoremap <C-G>g :Gtags -g <C-R><C-W><CR>

nnoremap <leader>c :cclose<cr>

"
" key maps
"
nnoremap <silent> <c-t>d :CxxtagsOpenDecl<CR>
nnoremap <silent> <c-t>r :CxxtagsListRefs<CR>
nnoremap <silent> <c-t>D :CxxtagsOpenDef<CR>
nnoremap <silent> <c-t>q :CxxtagsCloseMsgBuf<CR>
nnoremap <silent> <c-t>o :CxxtagsListOverride<CR>
nnoremap <silent> <c-t>O :CxxtagsListOverriden<CR>
nnoremap <silent> <c-t>t :CxxtagsListTypeInfo<CR>
nnoremap <silent> <c-t>u :CxxtagsUpdateDbFile<CR>

"
" ctrlp
"
let g:ctrlp_map = '<leader>pp'
nnoremap <leader>pm :CtrlPMRUFiles<CR>

"
" ps mode
"
autocmd FileType ps nnoremap <buffer> <silent> K :PsKillLine<CR>
autocmd FileType ps vnoremap <buffer> <silent> K :PsKillAllLines<CR>
autocmd FileType ps nnoremap <buffer> <silent> <C-K> 8k

"
" fugitive
"
autocmd! FileType gitcommit
autocmd! FileType gitcommit nmap <c-d> :let @t=winnr()<cr>:normal D<cr>:exec @t . "wincmd w"<cr>
