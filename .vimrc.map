cnoremap <C-D> <Del>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>
cnoremap <C-A> <Home>
cnoremap <c-n> <down>
cnoremap <c-p> <up>

nnoremap <C-N> :next<CR>
nnoremap <C-P> :prev<CR>
nnoremap <space> $
nnoremap * :Search \<<c-r><c-w>\><cr>
nnoremap gn :cnext<CR>
nnoremap gp :cprev<CR>
nnoremap <Leader><C-M> :make<CR>
nnoremap <C-W>C :cclose<CR>
nnoremap <Leader>c :set cursorcolumn!<CR>
nnoremap <C-E> 4<C-E>
nnoremap <C-Y> 4<C-Y>
nnoremap <C-K> 4<c-y>
nnoremap <c-_>r :reg<cr>
nnoremap <leader>C : <c-r><c-w><Home>
"nnoremap + :let @t=@/<cr>:let @/='[A-Z]'<cr>n:let @/=@t<cr>
"nnoremap - :let @t=@/<cr>:let @/='[A-Z]'<cr>N:let @/=@t<cr>
nnoremap <leader>y :call writefile(split(@@, '\n'), $HOME . "/yank.txt")<cr>
nnoremap <leader>p :read $HOME/yank.txt<cr>
nnoremap zm :PosListAdd<CR>
nnoremap zl :PosListShow<CR>:QuickfixsignsEnable<cr>
nnoremap zn :cnext<cr>
nnoremap zp :cprev<cr>

noremap <leader>r :%s/<c-r><c-w>/

vnoremap <C-J> 4j
vnoremap <C-K> 4k
vnoremap [[ :<c-u>let @t=@/<cr>:let @/='{'<cr>N:let @/=@t<cr>mv`>V`v
vnoremap ]] :<c-u>let @t=@/<cr>:let @/='}'<cr>`>n:let @/=@t<cr>mv`<V`v
vnoremap <leader>C y: <c-r>"<Home>
vnoremap <leader>r y:%s/<c-r>=escape(@",'\/')<cr>/
vnoremap <silent> * "vy:Search \V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>
vnoremap <silent> <leader>g "vy:exec ":vimgrep /" . escape(getreg('v'), '\/') . "/j %"<CR>
"vnoremap <C-R> y:<C-R>=substitute(@", "\n", "", "g")<CR><CR>
vnoremap <C-R> y:call <SID>ExecLines(@")<cr>
function! s:ExecLines(lines) range
    for i in split(a:lines, "\n")
        exec i
    endfor
endfunction

" grep
nnoremap <leader>g :vimgrep /<C-R><C-W>/j %<CR>:let @/="<C-R><C-W>"<CR>:set hlsearch<CR>
nnoremap gG :vimgrep /<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')/j %<CR>

"
" key maps for quickfix
"
autocmd! FileType qf
"autocmd  FileType qf nnoremap <buffer> <CR> <CR>zz:wincmd p<CR>
autocmd  FileType qf nnoremap <buffer> q :wincmd p<CR>:cclose<CR>

"
" key maps for python mode
"
autocmd! FileType python
autocmd  FileType python nnoremap <leader>l :PyLint<CR>

"
" gtags
"
nnoremap <C-G>r :Gtags -r <C-R><C-W><CR>
nnoremap <C-G>d :Gtags <C-R><C-W><CR>
nnoremap <C-G>g :Gtags -g <C-R><C-W><CR>

nnoremap <leader>c :cclose<cr>

"
" key maps
"
nnoremap <silent> <c-t>d :CxxtagsOpenDecl<CR>
nnoremap <silent> <c-t>r :CxxtagsListRefs<CR>
nnoremap <silent> <c-t>D :CxxtagsOpenDef<CR>
nnoremap <silent> <c-t>q :CxxtagsCloseMsgBuf<CR>
nnoremap <silent> <c-t>o :CxxtagsListOverride<CR>
nnoremap <silent> <c-t>O :CxxtagsListOverriden<CR>
nnoremap <silent> <c-t>t :CxxtagsListTypeInfo<CR>
nnoremap <silent> <c-t>u :CxxtagsUpdateDbFile<CR>

"
" ctrlp
"
let g:ctrlp_map = '<leader>pp'
nnoremap <leader>pm :CtrlPMRUFiles<CR>

"
" ps mode
"
autocmd FileType ps nnoremap <buffer> <silent> K :PsKillLine<CR>
autocmd FileType ps vnoremap <buffer> <silent> K :PsKillAllLines<CR>
autocmd FileType ps nnoremap <buffer> <silent> <C-K> 8k

"
" fugitive
"
autocmd! FileType gitcommit
autocmd! FileType gitcommit nmap <c-d> :let @t=winnr()<cr>:normal D<cr>:exec @t . "wincmd w"<cr>


"
" easy motion
"
nmap W <Plug>(easymotion-bd-w)
nmap E <Plug>(easymotion-bd-e)
nmap <c-u> <Plug>(easymotion-s2)
nmap S <Plug>(easymotion-s)
nmap F <Plug>(easymotion-bd-fl)
nmap <C-J> H<Plug>(easymotion-j)
let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys='asdghklwertyuiopzxcvbnmfj;'


