set wildmode=list:longest
set smartindent
set expandtab
set incsearch
set sw=4
set bs=2
set tabstop=4
set laststatus=2
set hlsearch
set encoding=utf-8
set ruler
set nonumber
set statusline=%f%m%r%h%w\ [%{&fenc}][%{&ff}]%y%6l,%-6c[%p%%(%l)]
set cursorline
set cursorcolumn
set fileformats=unix,dos,mac
set grepprg=mgrep
set nf="hex"
set ignorecase
set smartcase
set smarttab
set timeoutlen=1000
set directory=~/vim_swap
set foldmethod=syntax
set foldlevel=10

if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile
endif

" 文字コードの自動認識
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

"autocmd BufReadPost * normal g;|zz
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | exe "normal zz"

au! QuickfixCmdPost vimgrep,grep,make if len(getqflist()) != 0 | bo copen | wincmd p | endif

" python mode
let g:pymode_folding = 0
let g:pymode_lint_ignore = "E501,E226,E225,E228"
let g:pymode_lint_write = 0


" ps mode
if stridx(system("uname -a "), "Linux") != -1
    let g:PS_PsCmd = "ps axuf"
else
    let g:PS_PsCmd = "ps aux"
endif
let g:PS_KillCmd = "kill -9"
let g:PS_RegExRule = '\w\+\s\+\zs\d\+\ze'

" md preview
autocmd FileType markdown set makeprg=pandoc\ -r\ markdown\ -t\ html\ -c\ ~/devel/css/markdown.css\ %\ -o\ /tmp/md.html\ &&\ open\ /tmp/md.html

" manageg path list
function! s:UpdatePathList()
python << EOF
import vim
oldList = vim.eval('&path').split(",")
newList = vim.eval('system("cpath_mgr " . expand("%:p"))').split(",")
for i in newList:
    if not (i in oldList):
        oldList.append(i)
vim.command('let &path="' + ",".join(oldList) + '"')
EOF
endfunction

command! -nargs=0 CxxtagsInit :let g:CXXTAGS_DatabaseDir=fnamemodify(b:git_dir, ":h") . "/_db"
autocmd FileType * setlocal formatoptions-=ro
let g:CXXTAGS_UseNeomake = 1

set completeopt=longest,menuone

let g:Gtags_No_Auto_Jump=1

"
" easymotion
"
let g:EasyMotion_keys = 'ASDFJKLWERIOPGHZXCVNM;'
" Show target key with upper case to improve readability
let g:EasyMotion_use_upper = 1
" Jump to first match with enter & space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

let g:textobj_multiblock_blocks = [
    \ [ ",", ","],
    \ [ ",", ")"],
    \ [ "(", ")" ],
    \ [ "[", "]" ],
    \ [ "{", "}" ],
    \ [ '<', '>' ],
    \ [ '"', '"', 1 ],
    \ [ "'", "'", 1 ],
\ ]
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)

"
" Switch.vim
"
let g:switch_custom_definitions =
    \ [
    \   {
    \     'True':       'False',
    \     'False':      'True',
    \   },
    \ ]
nnoremap + :Switch<cr>

let g:errorformat="%*[^\"]\"%f\"%*\D%l: %m,\"%f\"%*\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l) :%m,%f:%l:%m,\"%f\"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[` ']%f',%DMaking %*\a in %f,%f|%l| %m"
let &makeprg="make -j " . system('cat /proc/cpuinfo | grep "core id" | wc -l | tr -d "\r" | tr -d "\n"')

"
" Vundle
"
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()
Bundle 'gmarik/Vundle.vim'
Bundle 'katonori/BinEdit.vim'
Bundle 'katonori/cxxtags-vim'
Bundle 'katonori/ps.vim'
Bundle 'katonori/regex_efm.vim'
Bundle 'katonori/vicmake.vim'
"Bundle 'katonori/vimsvn.vim'
Bundle 'osyo-manga/vim-textobj-multiblock'
Bundle 'tpope/vim-fugitive'
Bundle 'kana/vim-textobj-user'
Bundle 'Lokaltog/vim-easymotion'
Bundle "honza/vim-snippets"
Bundle 'Shougo/unite.vim'
Bundle 'tomtom/quickfixsigns_vim'
let g:quickfixsigns_events = ['BufReadPost', 'BufEnter', 'CursorHold', 'CursorHoldI', 'InsertLeave', 'InsertEnter', 'User']
Bundle 'Shougo/neomru.vim'
Bundle 'MultipleSearch'
Bundle 'AndrewRadev/switch.vim'
Bundle 'davidhalter/jedi-vim'
Bundle 'osyo-manga/vim-over'
Bundle 'benekastah/neomake'
Bundle 'lyuts/vim-rtags'

" Track the engine.
Bundle 'SirVer/ultisnips'

let g:UltiSnipsSnippetDirectories=[$HOME."/misc/UltiSnips"]
let g:UltiSnipsListSnippets="<c-x><c-k>"
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" yankround.vim {{{
Bundle 'LeafCage/yankround.vim'
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50
"" }}}
