set wildmode=list:longest
set smartindent
set expandtab
set incsearch
set sw=4
set bs=2
set laststatus=2
set hlsearch
set encoding=utf-8
set ruler
set number
set statusline=%f%m%r%h%w\ [%{&fenc}][%{&ff}]%y%6l,%-6c[%p%%(%l)]
set cursorline
set cursorcolumn
set fileformats=unix,dos,mac
set grepprg=mgrep
"set shell=env\ ZDOTDIR=${HOME}/.vim/\ zsh\ --rcs\ -c
"let $ZDOTDIR = "~/.vim/"
"set shellcmdflag=-c

" 文字コードの自動認識
if has('iconv')
  let s:enc_euc = 'euc-jp'
  let s:enc_jis = 'iso-2022-jp'
  " iconvがeucJP-msに対応しているかをチェック
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'eucjp-ms'
    let s:enc_jis = 'iso-2022-jp-3'
  " iconvがJISX0213に対応しているかをチェック
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let s:enc_euc = 'euc-jisx0213'
    let s:enc_jis = 'iso-2022-jp-3'
  endif
  " fileencodingsを構築
  if &encoding ==# 'utf-8'
    let s:fileencodings_default = &fileencodings
    let &fileencodings = s:enc_jis .','. s:enc_euc .',cp932'
    let &fileencodings = &fileencodings .','. s:fileencodings_default
    unlet s:fileencodings_default
  else
    let &fileencodings = &fileencodings .','. s:enc_jis
    set fileencodings+=utf-8,ucs-2le,ucs-2
    if &encoding =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
      set fileencodings+=cp932
      set fileencodings-=euc-jp
      set fileencodings-=euc-jisx0213
      set fileencodings-=eucjp-ms
      let &encoding = s:enc_euc
      let &fileencoding = s:enc_euc
    else
      let &fileencodings = &fileencodings .','. s:enc_euc
    endif
  endif
  " 定数を処分
  unlet s:enc_euc
  unlet s:enc_jis
endif
" 日本語を含まない場合は fileencoding に encoding を使うようにする
if has('autocmd')
  function! AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif
" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

au! QuickfixCmdPost vimgrep,grep,make if len(getqflist()) != 0 | bo copen | wincmd p | endif

" Pathogen load
filetype off

call pathogen#infect()
call pathogen#helptags()

filetype plugin indent on

" python mode
let g:pymode_folding = 0
let g:pymode_lint_ignore = "E501,E226,E225,E228"
let g:pymode_lint_write = 0

" hier
execute "highlight ucurl_my None"
let g:hier_highlight_group_qf = "ucurl_my"

" errormarker
let g:errormarker_errorgroup = "Normal"
let g:errormarker_warninggroup = "Normal"

" ps mode
if stridx(system("uname -a "), "Linux") != -1
    let g:PS_PsCmd = "ps axuf"
else
    let g:PS_PsCmd = "ps aux"
endif
let g:PS_KillCmd = "kill -9"
let g:PS_RegExRule = '\w\+\s\+\zs\d\+\ze'

" md preview
autocmd FileType markdown set makeprg=pandoc\ -r\ markdown\ -t\ html\ -c\ ~/devel/css/markdown.css\ %\ -o\ /tmp/md.html\ &&\ open\ /tmp/md.html

" errormaker.vim
let g:errormarker_errortext = ">>"
" Defines the text (two characters) to show for warnings in the gui
let g:errormarker_warningtext = "->"
" Defines the highlighting group to use for errors in the gui
let g:errormarker_errorgroup = "Normal"
" Defines the highlighting group to use for warnings in the gui
let g:errormarker_warninggroup = "Normal"
" Defines the highlighting group to use for errors in the gui
let g:errormarker_errorgroup_signhl = "Error"
" Defines the highlighting group to use for warnings in the gui
let g:errormarker_warninggroup_signhl = "DiffChange"

command! -nargs=0 CxxtagsInit :let g:CXXTAGS_DatabaseDir=fnamemodify(b:git_dir, ":h") . "/db"
autocmd FileType * setlocal formatoptions-=ro
