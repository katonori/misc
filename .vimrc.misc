set wildmode=list:longest
set smartindent
set expandtab
set incsearch
set sw=4
set bs=2
set tabstop=4
set laststatus=2
set hlsearch
set encoding=utf-8
set ruler
set nonumber
set statusline=%f:%l(%L)\ %m%r%h%w\ [%{&fenc}][%{&ff}]%y%6l,%-6c[%p%%(%l)]
"set cursorline
"set cursorcolumn
set fileformats=unix,dos,mac
set grepprg=mgrep
set nf="hex"
set ignorecase
set smartcase
set smarttab
set timeoutlen=1000
set directory=~/vim_swap
"set foldmethod=syntax
set foldmethod=marker
set foldlevel=10

set guioptions=M
set filetype=off

if has('persistent_undo')
    set undodir=~/.vim/undo
    set undofile
endif

" □とか○の文字があってもカーソル位置がずれないようにする
if exists('&ambiwidth')
  set ambiwidth=double
endif

"autocmd BufReadPost * normal g;|zz
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | exe "normal zz"

au! QuickfixCmdPost vimgrep,grep,make if len(getqflist()) != 0 | bo copen | wincmd p | endif

" python mode
let g:pymode_folding = 0
let g:pymode_lint_ignore = "E501,E226,E225,E228"
let g:pymode_lint_write = 0

" ps mode
if stridx(system("uname -a "), "Linux") != -1
    let g:PS_PsCmd = "ps axuf"
else
    let g:PS_PsCmd = "ps aux"
endif
let g:PS_KillCmd = "kill -9"
let g:PS_RegExRule = '\w\+\s\+\zs\d\+\ze'

" md preview
autocmd FileType markdown set makeprg=pandoc\ -r\ markdown\ -t\ html\ -c\ ~/devel/css/markdown.css\ %\ -o\ /tmp/md.html\ &&\ open\ /tmp/md.html
autocmd FileType log set makeprg=cat\ %
autocmd FileType text set makeprg=cat\ %

" manageg path list
function! s:UpdatePathList()
python << EOF
import vim
oldList = vim.eval('&path').split(",")
newList = vim.eval('system("cpath_mgr " . expand("%:p"))').split(",")
for i in newList:
    if not (i in oldList):
        oldList.append(i)
vim.command('let &path="' + ",".join(oldList) + '"')
EOF
endfunction

command! -nargs=0 CxxtagsInit :let g:CXXTAGS_DatabaseDir=fnamemodify(b:git_dir, ":h") . "/_db"
autocmd FileType * setlocal formatoptions-=ro
let g:CXXTAGS_UseNeomake = 1

set completeopt=longest,menuone

let g:Gtags_No_Auto_Jump=1

"
" easymotion
"
let g:EasyMotion_keys = 'asdfjklweriopghzxcvn'
" Show target key with upper case to improve readability
let g:EasyMotion_use_upper = 1
" Jump to first match with enter & space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

let g:textobj_multiblock_blocks = [
    \ [ ",", ","],
    \ [ ",", ")"],
    \ [ "(", ")" ],
    \ [ "[", "]" ],
    \ [ "{", "}" ],
    \ [ '<', '>' ],
    \ [ '"', '"', 1 ],
    \ [ "'", "'", 1 ],
\ ]
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
vmap ab <Plug>(textobj-multiblock-a)
vmap ib <Plug>(textobj-multiblock-i)

"
" Switch.vim
"
let g:switch_custom_definitions =
    \ [
    \   {
    \     'True':       'False',
    \     'False':      'True',
    \   },
    \ ]
nnoremap + :Switch<cr>

let g:errorformat="%*[^\"]\"%f\"%*\D%l: %m,\"%f\"%*\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l) :%m,%f:%l:%m,\"%f\"\, line %l%*\D%c%*[^ ] %m,%D%*\a[%*\d]: Entering directory %*[`']%f',%X%*\a[%*\d]: Leaving directory %*[`']%f',%D%*\a: Entering directory %*[`']%f',%X%*\a: Leaving directory %*[` ']%f',%DMaking %*\a in %f,%f|%l| %m"
let &makeprg="make -j " . system('cat /proc/cpuinfo | grep "core id" | wc -l | tr -d "\r" | tr -d "\n"')

"
" Tab settings
"

" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor

map <silent> [Tag]l :tablast<CR>
map <silent> [Tag]r :tabnext<CR>
map <silent> [Tag]e :tabprevious<CR>
map <silent> [Tag]c :tabnew .<CR>
map <silent> [Tag]n :tabnew .<CR>
map <silent> [Tag]gf <c-w>gf

"
" filetype
"
autocmd BufRead,BufNewFile *.log setfiletype log
autocmd BufRead,BufNewFile log setfiletype log

"
" Vundle
"
set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()
Bundle 'gmarik/Vundle.vim'
Bundle 'katonori/BinEdit.vim'
Bundle 'katonori/cxxtags-vim'
Bundle 'katonori/ps.vim'
Bundle 'osyo-manga/vim-textobj-multiblock'
Bundle 'tpope/vim-fugitive'
Bundle 'kana/vim-textobj-user'
Bundle 'Lokaltog/vim-easymotion'
Bundle "honza/vim-snippets"
Bundle 'Shougo/unite.vim'
let g:unite_source_grep_max_candidates = 200
let g:unite_source_rec_find_args=["-maxdepth=2"]
Bundle 'tomtom/quickfixsigns_vim'
let g:quickfixsigns_events = ['BufReadPost', 'BufEnter', 'CursorHold', 'CursorHoldI', 'InsertLeave', 'InsertEnter', 'User']
Bundle 'Shougo/neomru.vim'
Bundle 'MultipleSearch'
Bundle 'AndrewRadev/switch.vim'
Bundle 'davidhalter/jedi-vim'
Bundle 'osyo-manga/vim-over'
Bundle 'benekastah/neomake'
"Bundle 'lyuts/vim-rtags'
"Bundle 'Valloric/YouCompleteMe'
let g:ycm_filetype_blacklist = {}
Bundle 'tpope/vim-surround'
Bundle 'gregsexton/gitv'
Bundle 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Bundle 'junegunn/fzf.vim'
let g:fzf_layout = { 'window': 'bel split' }
Bundle 'Raimondi/vim_search_objects'
Bundle 'simeji/winresizer'
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
let g:winresizer_start_key = '<c-x><c-e>'

" Track the engine.
Bundle 'SirVer/ultisnips'

let g:UltiSnipsSnippetDirectories=[$HOME."/misc/UltiSnips"]
let g:UltiSnipsListSnippets="<c-x><c-o>"
let g:UltiSnipsExpandTrigger="<c-o>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" yankround.vim {{{
Bundle 'LeafCage/yankround.vim'
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50
"" }}}

Bundle 'jreybert/vimagit'
