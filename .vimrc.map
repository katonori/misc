"cnoremap <C-D> <Del>
cnoremap <C-B> <Left>
cnoremap <C-F> <Right>
cnoremap <C-A> <Home>
cnoremap <c-n> <down>
cnoremap <c-p> <up>

nnoremap <space>n :next<CR>
nnoremap <space>p :prev<CR>
nnoremap <space>l $
nnoremap <space>h ^
nnoremap * :Search \<<c-r><c-w>\><cr>
nnoremap <Leader><C-M> :make<CR>
nnoremap <C-W>C :cclose<CR>
nnoremap <Leader>c :set cursorcolumn!<CR>
nnoremap <C-j> 5j
nnoremap <C-k> 5k
xnoremap <C-j> 5j
xnoremap <C-k> 5k
vnoremap <C-j> 5j
vnoremap <C-k> 5k
"nnoremap <C-j> 8<c-e>
"nnoremap <C-K> 8<c-y>
nnoremap <c-_>r :reg<cr>
nnoremap <leader>C : <c-r><c-w><Home>
"nnoremap + :let @t=@/<cr>:let @/='[A-Z]'<cr>n:let @/=@t<cr>
"nnoremap - :let @t=@/<cr>:let @/='[A-Z]'<cr>N:let @/=@t<cr>
nnoremap <leader>y :call writefile(split(@@, '\n'), $HOME . "/yank.txt")<cr>
nnoremap <leader>p :read $HOME/yank.txt<cr>
"nnoremap zm :PosListAdd<CR>
"nnoremap zl :PosListShow<CR>:QuickfixsignsEnable<cr>
nnoremap cn :cnext<CR>
nnoremap cp :cprev<CR>
nnoremap zn :cnext<cr>
nnoremap zp :cprev<cr>
nnoremap <space>d :silent execute("!echo 'cd " . expand("%:p:h") . "' >" . "~/.vimrc.cwd")<cr><c-l>
nnoremap md d`z
nnoremap my "ry`z<c-o>
nnoremap mD d'z
nnoremap mY "ry'z<c-o>
nnoremap m= ='z<c-o>
nnoremap m> >'z<c-o>
nnoremap m< <'z<c-o>
nnoremap QQ :q<cr>
nnoremap <space>F /^[^\t #\/}]<cr>
nnoremap <space>L /\(\<for\>\)\\|\(\<while\>\)\\|\(\<do\>\)<cr>
nnoremap ( F 
nnoremap ) f 
nnoremap <space>r :OverCommandLine<cr>
inoremap <c-s> <esc>:w<cr>
nnoremap <c-s> <esc>:w<cr>
"nnoremap n nzz

noremap <leader>r :%s/<c-r><c-w>/
noremap <leader>lm :REefmMK log<cr>
noremap <leader>s :SvnGetStat 

vnoremap <C-j> 4j
vnoremap <C-k> 4k
vnoremap [[ :<c-u>let @t=@/<cr>:let @/='{'<cr>N:let @/=@t<cr>mv`>V`v
vnoremap ]] :<c-u>let @t=@/<cr>:let @/='}'<cr>`>n:let @/=@t<cr>mv`<V`v
vnoremap <leader>C y: <c-r>"<Home>
vnoremap <leader>r y:%s/<c-r>=escape(@",'\/')<cr>/
vnoremap <silent> * "vy:Search \V<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')<CR><CR>
vnoremap <silent> <leader>g "vy:exec ":vimgrep /" . escape(getreg('v'), '\/') . "/j %"<CR>
"vnoremap <C-R> y:<C-R>=substitute(@", "\n", "", "g")<CR><CR>
vnoremap <C-R> y:call <SID>ExecLines(@")<cr>
function! s:ExecLines(lines) range
    for i in split(a:lines, "\n")
        exec i
    endfor
endfunction

" grep
nnoremap <leader>g :vimgrep /<C-R><C-W>/j %<CR>:let @/="<C-R><C-W>"<CR>:set hlsearch<CR>
nnoremap gG :vimgrep /<C-r>=substitute(escape(@v,'\/'),"\n",'\\n','g')/j %<CR>

"
" key maps for quickfix
"
autocmd! FileType qf
"autocmd  FileType qf nnoremap <buffer> <CR> <CR>zz:wincmd p<CR>
autocmd  FileType qf nnoremap <buffer> q :wincmd p<CR>:cclose<CR>

"
" key maps for python mode
"
autocmd! FileType python
autocmd  FileType python nnoremap <leader>l :PyLint<CR>

"
" gtags
"
nnoremap <C-G>r :Gtags -r <C-R><C-W><CR>
nnoremap <C-G>d :Gtags <C-R><C-W><CR>
nnoremap <C-G>g :Gtags -g <C-R><C-W><CR>

nnoremap <leader>C :cclose<cr>

"
" cxxtags key maps
"
nnoremap <silent> <space>d :CxxtagsOpenDecl<CR>
nnoremap <silent> <space>r :CxxtagsListRefs<CR>
nnoremap <silent> <space>D :CxxtagsOpenDef<CR>
nnoremap <silent> <space>q :CxxtagsCloseMsgBuf<CR>
nnoremap <silent> <space>o :CxxtagsListOverride<CR>
nnoremap <silent> <space>O :CxxtagsListOverriden<CR>
nnoremap <silent> <space>t :CxxtagsListTypeInfo<CR>
nnoremap <silent> <space>u :CxxtagsUpdateDbFile<CR>
nnoremap <silent> <space>i :CxxtagsOpenIncludedFile<CR>

"
" ctrlp
"
let g:ctrlp_map = '<leader>pp'
nnoremap <leader>pm :CtrlPMRUFiles<CR>

"
" ps mode
"
autocmd FileType ps nnoremap <buffer> <silent> K :PsKillLine<CR>
autocmd FileType ps vnoremap <buffer> <silent> K :PsKillAllLines<CR>
autocmd FileType ps nnoremap <buffer> <silent> <C-K> 8k

"
" fugitive
"
autocmd! FileType gitcommit
autocmd! FileType gitcommit nmap <c-d> :let @t=winnr()<cr>:normal D<cr>:exec @t . "wincmd w"<cr>


"
" easy motion
"
nmap <space>w <Plug>(easymotion-bd-w)
xmap <space>w <Plug>(easymotion-bd-w)
nmap <space>e <Plug>(easymotion-bd-e)
xmap <space>e <Plug>(easymotion-bd-e)
nmap <space>S <Plug>(easymotion-s2)
xmap <space>S <Plug>(easymotion-s2)
nmap <space>s <Plug>(easymotion-s)
xmap <space>s <Plug>(easymotion-s)
nmap <space>f <Plug>(easymotion-bd-fl)
xmap <space>f <Plug>(easymotion-bd-fl)
nmap <space>j <Plug>(easymotion-j)
xmap <space>j <Plug>(easymotion-j)
nmap <space>k <Plug>(easymotion-k)
xmap <space>k <Plug>(easymotion-k)
let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys='asdghklwertyuiopzxcvbnmfj;'

function! g:RedirCommand(cmd)
    let l:bufname = "redir_buff"
    silent redir => stored_cmd
    silent execute(a:cmd)
    silent redir END
    " check if already opend
    let l:winnum = bufwinnr(l:bufname)
    if l:winnum == -1
        execute "botright 10new " . "redir_buff"
        "execute "rightb 20vnew " . "redir_buff"
        execute "set buftype=nofile"
    else
        exec l:winnum . "wincmd w"
    endif
    "
    " update buffer
    "
    setlocal modifiable
    setlocal noreadonly
    silent! %delete _
    let l:msg = split(stored_cmd, "\n")
    for l:line in l:msg
        call append(line("$")-1, l:line)
    endfor
    exec "0"
    setlocal nomodifiable
    setlocal readonly
    exec("wincmd p")
endfunction

function! g:RedirCloseBuf()
    let l:bufname = "redir_buff"
    let l:winnum = bufwinnr(l:bufname)
    if l:winnum == -1
    else
        exec l:winnum . "wincmd w"
        exec "wincmd c"
        exec "wincmd p"
    endif
endfunction

nnoremap mm :marks<cr>
nnoremap mr :reg<cr>

nnoremap <space>f :let @0="+" . line(".") . " " . expand("%:p")<cr>
nnoremap <space>g :args <c-r>"<cr>

nnoremap ml :doautocmd User<cr>
nnoremap <space>c :ccl<cr>:copen 50<cr>

" unite
nnoremap Uu :Unite -direction=below<cr>
"nnoremap Uf :Unite -direction=below file_mru<cr>
"nnoremap UF :Unite -direction=below file_rec<cr>
"nnoremap Ul :Unite -direction=below line<cr>
nnoremap Uf :History<cr>
nnoremap UF :Files<cr>
nnoremap Ul :BLines<cr>

" input mode
inoremap <c-b> <left>
inoremap <c-f> <right>
